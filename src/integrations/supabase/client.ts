
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://dogovetdxhmankfhpkgi.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImRvZ292ZXRkeGhtYW5rZmhwa2dpIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQxMDE2MDQsImV4cCI6MjA1OTY3NzYwNH0.ndj9Ho0dq0Zn-Y4T2WC7z8qVaWzEPP39ic47pJNB7DU";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
  }
});

// Create a client with admin access for specific admin operations
// This should only be used in admin-specific functions
export const getAdminClient = (serviceRoleKey: string) => {
  return createClient<Database>(SUPABASE_URL, serviceRoleKey);
};

// Helper method to get a client with the service role key for admin operations
export const getServiceRoleClient = async () => {
  try {
    // Request the service role key from the admin session
    const { data, error } = await supabase.functions.invoke('get-service-role-key', {
      method: 'POST'
    });
    
    if (error || !data?.serviceRoleKey) {
      console.error('Error getting service role key:', error);
      return null;
    }
    
    // Create a client with the service role key
    return createClient<Database>(SUPABASE_URL, data.serviceRoleKey);
  } catch (err) {
    console.error('Exception getting service role client:', err);
    return null;
  }
};

// Helper function to update anonymous user statistics
export const updateAnonUser = async (identifier: string) => {
  try {
    // Use SQL query directly instead of RPC function to avoid TypeScript issues
    const { error } = await supabase
      .from('anon_users')
      .upsert(
        { 
          identifier,
          search_count: 1,
          last_seen: new Date().toISOString()
        },
        { 
          onConflict: 'identifier',
          ignoreDuplicates: false
        }
      );
    
    if (error) {
      console.error("Error updating anonymous user:", error);
      return false;
    }
    
    return true;
  } catch (e) {
    console.error("Error processing anonymous user update:", e);
    return false;
  }
};
