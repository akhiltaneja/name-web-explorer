
import { SocialMediaProfile } from "@/types/socialMedia";
import jsPDF from "jspdf";
import autoTable from "jspdf-autotable";

// This function has been updated to generate a PDF report
export const generatePdfReport = (searchName: string, profiles: SocialMediaProfile[]): jsPDF => {
  const doc = new jsPDF();
  const date = new Date();
  const formattedDate = date.toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' });
  const formattedTime = date.toLocaleTimeString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true });
  
  // Add report title
  doc.setFontSize(18);
  doc.text(`Social Media Report: ${searchName}`, 14, 22);
  
  // Add timestamp
  doc.setFontSize(11);
  doc.setTextColor(100);
  doc.text(`Generated on ${formattedDate} at ${formattedTime}`, 14, 30);
  
  // Add summary
  doc.text(`Found ${profiles.length} social media profiles matching "${searchName}"`, 14, 38);
  
  // Create profile table data
  const tableData = profiles.map((profile, index) => [
    index + 1,
    profile.platform,
    profile.username,
    profile.status || "Unknown",
    profile.category || "General",
    profile.url
  ]);
  
  // Add profiles table
  autoTable(doc, {
    startY: 45,
    head: [['#', 'Platform', 'Username', 'Status', 'Category', 'URL']],
    body: tableData,
    theme: 'striped',
    headStyles: {
      fillColor: [66, 133, 244],
      textColor: 255,
      fontStyle: 'bold'
    },
    columnStyles: {
      0: { cellWidth: 10 },
      5: { cellWidth: 'auto' }
    },
    didDrawCell: (data) => {
      // Add URL hyperlinking for the URL column (index 5)
      if (data.section === 'body' && data.column.index === 5 && data.cell.text.length > 0) {
        const url = data.cell.text[0];
        const textWidth = doc.getStringUnitWidth(url) * data.cell.styles.fontSize / doc.internal.scaleFactor;
        
        // Clear the default text to avoid shadow effect
        doc.setFillColor(255, 255, 255);
        doc.rect(data.cell.x, data.cell.y, data.cell.width, data.cell.height, 'F');
        
        // Draw the link text
        doc.setTextColor(0, 0, 255);
        doc.textWithLink(url, data.cell.x + 1, data.cell.y + 4, { 
          url: url,
          newWindow: true  // This makes links open in a new tab
        });
        doc.setTextColor(0);
      }
    }
  });
  
  // Add footer
  const pageCount = doc.internal.pages.length;
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i);
    doc.setFontSize(10);
    doc.setTextColor(100);
    doc.text(
      "Generated by CandidateChecker.io - The ultimate social profile search tool",
      doc.internal.pageSize.width / 2,
      doc.internal.pageSize.height - 10,
      { align: "center" }
    );
  }
  
  return doc;
};

// This function has been kept for backward compatibility
export const generateTextReport = (searchName: string, profiles: SocialMediaProfile[]): string => {
  const date = new Date();
  const formattedDate = date.toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' });
  const formattedTime = date.toLocaleTimeString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true });
  
  // Generate text report header
  let report = `Social Media Report: ${searchName}\n`;
  report += `Generated on ${formattedDate} at ${formattedTime}\n\n`;
  report += `Found ${profiles.length} social media profiles matching "${searchName}"\n\n`;
  
  // Add profile information
  report += "Profiles Found:\n";
  report += "---------------\n\n";
  
  profiles.forEach((profile, index) => {
    report += `${index + 1}. Platform: ${profile.platform}\n`;
    report += `   Username: ${profile.username}\n`;
    report += `   Status: ${profile.status || "Unknown"}\n`;
    report += `   Category: ${profile.category || "General"}\n`;
    report += `   URL: ${profile.url}\n\n`;
  });
  
  // Add footer
  report += "-----------------------------------\n";
  report += "Generated by CandidateChecker.io\n";
  report += "The ultimate social profile search tool\n";
  
  return report;
};

// Updated to download PDF reports
export const downloadTextReport = (searchName: string, profiles: SocialMediaProfile[]): void => {
  try {
    const doc = generatePdfReport(searchName, profiles);
    doc.save(`${searchName.replace(/\s+/g, "_")}_social_report.pdf`);
  } catch (error) {
    console.error("Error generating PDF report:", error);
  }
};

// Simulates email functionality by returning success after a timeout
export const emailTextReport = async (email: string, searchName: string, profiles: SocialMediaProfile[]): Promise<boolean> => {
  try {
    const report = generateTextReport(searchName, profiles);
    
    // Simulate email sending (in a real app this would call an API)
    console.log(`Email report for "${searchName}" sent to ${email}`);
    console.log("Text report content (first 100 chars):", report.substring(0, 100) + "...");
    
    // For this demo, we'll just simulate a successful email
    return new Promise(resolve => {
      setTimeout(() => resolve(true), 1500);
    });
  } catch (error) {
    console.error("Error generating email report:", error);
    return false;
  }
};
