
import { jsPDF } from "jspdf";
import autoTable from "jspdf-autotable";
import { SocialMediaProfile } from "@/types/socialMedia";
import { supabase } from "@/integrations/supabase/client";

// Function to generate the text report content
const generateTextReport = (name: string, profiles: SocialMediaProfile[]): string => {
  // Group profiles by category
  const profilesByCategory: Record<string, SocialMediaProfile[]> = {};
  
  profiles.forEach(profile => {
    const category = profile.category || "Other";
    if (!profilesByCategory[category]) {
      profilesByCategory[category] = [];
    }
    profilesByCategory[category].push(profile);
  });
  
  let text = `Social Media Report for: ${name}\n`;
  text += `Generated on: ${new Date().toLocaleString()}\n\n`;
  
  // Add profiles by category
  Object.keys(profilesByCategory).forEach(category => {
    text += `\n== ${category} ==\n\n`;
    
    profilesByCategory[category].forEach(profile => {
      text += `${profile.platform}: ${profile.url}\n`;
    });
  });
  
  text += "\n\nGenerated by CandidateChecker";
  
  return text;
};

// Function to download the report as a PDF file
export const downloadTextReport = (name: string, profiles: SocialMediaProfile[]): void => {
  try {
    const doc = new jsPDF();
    
    // Set document title
    const title = `Social Media Report: ${name}`;
    doc.setFontSize(18);
    doc.text(title, 14, 22);
    
    // Add generation date
    doc.setFontSize(10);
    doc.text(`Generated on: ${new Date().toLocaleString()}`, 14, 30);
    
    // Group profiles by category
    const profilesByCategory: Record<string, SocialMediaProfile[]> = {};
    
    profiles.forEach(profile => {
      const category = profile.category || "Other";
      if (!profilesByCategory[category]) {
        profilesByCategory[category] = [];
      }
      profilesByCategory[category].push(profile);
    });
    
    let yPosition = 40;
    
    // Add profiles by category
    Object.keys(profilesByCategory).forEach(category => {
      // Add category header
      doc.setFontSize(14);
      doc.setTextColor(51, 51, 153);
      doc.text(`${category}`, 14, yPosition);
      yPosition += 8;
      
      // Create table data for this category
      const tableData = profilesByCategory[category].map(profile => [
        profile.platform,
        {
          content: profile.url,
          styles: { textColor: [0, 0, 255] },
          link: profile.url
        }
      ]);
      
      // Add table
      autoTable(doc, {
        startY: yPosition,
        head: [['Platform', 'URL']],
        body: tableData,
        headStyles: { fillColor: [66, 139, 202] },
        columnStyles: { 
          0: { cellWidth: 40 },
          1: { cellWidth: 'auto' }
        },
        didDrawCell: (data) => {
          // Make URLs clickable
          if (data.column.index === 1 && data.cell.section === 'body') {
            const url = profiles[data.row.index]?.url;
            if (url) {
              doc.link(data.cell.x, data.cell.y, data.cell.width, data.cell.height, { url, newWindow: true });
            }
          }
        }
      });
      
      yPosition = (doc as any).lastAutoTable.finalY + 15;
      
      // Add page if needed
      if (yPosition > 270) {
        doc.addPage();
        yPosition = 20;
      }
    });
    
    // Add footer
    const pageCount = doc.getNumberOfPages();
    for (let i = 1; i <= pageCount; i++) {
      doc.setPage(i);
      doc.setFontSize(8);
      doc.setTextColor(128, 128, 128);
      doc.text('Generated by CandidateChecker', 14, 290);
      doc.text(`Page ${i} of ${pageCount}`, 196, 290, { align: 'right' });
    }
    
    // Save the PDF
    doc.save(`${name.replace(/\s+/g, '_')}_social_report.pdf`);
  } catch (error) {
    console.error('Error generating PDF report:', error);
    throw new Error('Failed to generate PDF report');
  }
};

// Function to email the report
export const emailTextReport = async (
  recipientEmail: string,
  name: string,
  profiles: SocialMediaProfile[]
): Promise<boolean> => {
  try {
    const reportContent = generateTextReport(name, profiles);
    
    // Create PDF
    const doc = new jsPDF();
    
    // Set document title
    const title = `Social Media Report: ${name}`;
    doc.setFontSize(18);
    doc.text(title, 14, 22);
    
    // Add generation date
    doc.setFontSize(10);
    doc.text(`Generated on: ${new Date().toLocaleString()}`, 14, 30);
    
    // Group profiles by category
    const profilesByCategory: Record<string, SocialMediaProfile[]> = {};
    
    profiles.forEach(profile => {
      const category = profile.category || "Other";
      if (!profilesByCategory[category]) {
        profilesByCategory[category] = [];
      }
      profilesByCategory[category].push(profile);
    });
    
    let yPosition = 40;
    
    // Add profiles by category
    Object.keys(profilesByCategory).forEach(category => {
      // Add category header
      doc.setFontSize(14);
      doc.setTextColor(51, 51, 153);
      doc.text(`${category}`, 14, yPosition);
      yPosition += 8;
      
      // Create table data for this category
      const tableData = profilesByCategory[category].map(profile => [
        profile.platform,
        {
          content: profile.url,
          styles: { textColor: [0, 0, 255] },
          link: profile.url
        }
      ]);
      
      // Add table
      autoTable(doc, {
        startY: yPosition,
        head: [['Platform', 'URL']],
        body: tableData,
        headStyles: { fillColor: [66, 139, 202] },
        columnStyles: { 
          0: { cellWidth: 40 },
          1: { cellWidth: 'auto' }
        },
        didDrawCell: (data) => {
          // Make URLs clickable
          if (data.column.index === 1 && data.cell.section === 'body') {
            const url = profiles[data.row.index]?.url;
            if (url) {
              doc.link(data.cell.x, data.cell.y, data.cell.width, data.cell.height, { url, newWindow: true });
            }
          }
        }
      });
      
      yPosition = (doc as any).lastAutoTable.finalY + 15;
      
      // Add page if needed
      if (yPosition > 270) {
        doc.addPage();
        yPosition = 20;
      }
    });
    
    // Add footer
    const pageCount = doc.getNumberOfPages();
    for (let i = 1; i <= pageCount; i++) {
      doc.setPage(i);
      doc.setFontSize(8);
      doc.setTextColor(128, 128, 128);
      doc.text('Generated by CandidateChecker', 14, 290);
      doc.text(`Page ${i} of ${pageCount}`, 196, 290, { align: 'right' });
    }
    
    const pdfOutput = doc.output('arraybuffer');
    const pdfBase64 = Buffer.from(pdfOutput).toString('base64');
    
    // Send email with the report via Supabase function
    // Implement this when an email service is set up
    console.log(`Sending report to ${recipientEmail} for search: ${name}`);
    
    // Mock the email sending for now
    // TODO: Implement actual email sending via a backend service
    
    return true;
  } catch (error) {
    console.error('Error sending email report:', error);
    return false;
  }
};
