
import { SocialMediaProfile } from "@/types/socialMedia";

// This function has been modified to return a formatted string instead of a PDF
export const generateTextReport = (searchName: string, profiles: SocialMediaProfile[]): string => {
  const date = new Date();
  const formattedDate = date.toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' });
  const formattedTime = date.toLocaleTimeString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true });
  
  // Generate text report header
  let report = `Social Media Report: ${searchName}\n`;
  report += `Generated on ${formattedDate} at ${formattedTime}\n\n`;
  report += `Found ${profiles.length} social media profiles matching "${searchName}"\n\n`;
  
  // Add profile information
  report += "Profiles Found:\n";
  report += "---------------\n\n";
  
  profiles.forEach((profile, index) => {
    report += `${index + 1}. Platform: ${profile.platform}\n`;
    report += `   Username: ${profile.username}\n`;
    report += `   Status: ${profile.status || "Unknown"}\n`;
    report += `   Category: ${profile.category || "General"}\n`;
    report += `   URL: ${profile.url}\n\n`;
  });
  
  // Add footer
  report += "-----------------------------------\n";
  report += "Generated by CandidateChecker.io\n";
  report += "The ultimate social profile search tool\n";
  
  return report;
};

export const downloadTextReport = (searchName: string, profiles: SocialMediaProfile[]): void => {
  try {
    const report = generateTextReport(searchName, profiles);
    
    // Create a blob with the text content
    const blob = new Blob([report], { type: 'text/plain' });
    
    // Create a download link
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `${searchName.replace(/\s+/g, "_")}_social_report.txt`;
    
    // Trigger download
    document.body.appendChild(link);
    link.click();
    
    // Clean up
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  } catch (error) {
    console.error("Error generating text report:", error);
  }
};

// Simulates email functionality by returning success after a timeout
export const emailTextReport = async (email: string, searchName: string, profiles: SocialMediaProfile[]): Promise<boolean> => {
  try {
    const report = generateTextReport(searchName, profiles);
    
    // Simulate email sending (in a real app this would call an API)
    console.log(`Email report for "${searchName}" sent to ${email}`);
    console.log("Text report content (first 100 chars):", report.substring(0, 100) + "...");
    
    // For this demo, we'll just simulate a successful email
    return new Promise(resolve => {
      setTimeout(() => resolve(true), 1500);
    });
  } catch (error) {
    console.error("Error generating email report:", error);
    return false;
  }
};
